from decimal import Decimal
from django.db import models
from django.utils.text import slugify
import random
import string
from django.urls import reverse
from django.core.validators import MinValueValidator, MaxValueValidator



class Category(models.Model):
    """
    A model representing a category in the shop.

    Attributes:
        name (CharField): The name of the category.
        parent (ForeignKey): A foreign key to the parent category.
        slug (SlugField): A slug for the category.
        created_at (DateTimeField): The date and time the category was created.
    """

    name = models.CharField("Категория", max_length=100, db_index=True)
    parent = models.ForeignKey(
        'self',
        blank=True,
        null=True,
        related_name='children',
        on_delete=models.CASCADE
    )
    slug = models.SlugField("URL", max_length=255, unique=True, null=False, editable=True)
    created_at = models.DateTimeField("Дата создания", auto_now_add=True)
    
    class Meta:
        unique_together = (['slug', 'parent'])
        verbose_name = 'Категория'
        verbose_name_plural = 'Категории'
        
    def __str__(self):
        """
        Return a string representation of the category with its parent categories.

        The string representation is a concatenation of the category name and its
        parent categories, using ' -> ' as the separator.

        For example, if the category has the name 'Books' and its parent categories
        are 'Department' and 'Store', the string representation will be
        'Store -> Department -> Books'.
        """
        full_path = [self.name]
        k = self.parent
        while k is not None:
            full_path.append(k.name)
            k = k.parent
        return ' -> '.join(full_path[::-1])
    
    @staticmethod
    def _rand_slug():
        """
        Generate a random slug consisting of 3 characters.

        The slug is made up of lowercase letters and digits.

        Returns:
            str: A random string of 3 characters.
        """

        return ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))
    
    def save(self, *args, **kwargs):
        """
        Save the category.

        If the category does not have a slug, generate one from the category name
        and a random slug. The slug is generated by concatenating the random slug
        with the category name and passing the result to :func:`slugify`.

        The generated slug is then saved as the category's slug, and the category is
        then saved as usual.
        """
        if not self.slug:
            self.slug = slugify(self._rand_slug() + '-pickBetter' + self.name)
        super(Category, self).save(*args, **kwargs)
        
    def get_absolute_url(self):
        return reverse('shop:category-list', args=[self.slug])
    

class Product(models.Model):
    """
    A model representing a product in the shop.

    Attributes:
        category (ForeignKey): A foreign key to the Category model.
        name (CharField): The name of the product.
        brand (CharField): The brand of the product.
        description (TextField): A description of the product.
        slug (SlugField): A unique slug for the product.
        price (DecimalField): The price of the product.
        image (ImageField): An image of the product.
        available (BooleanField): Availability status of the product.
        created_at (DateTimeField): The date and time when the product was created.
        updated_at (DateTimeField): The date and time when the product was last updated.
    """
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='products')
    name = models.CharField("Название", max_length=100, db_index=True)
    brand = models.CharField("Бренд", max_length=100)
    description = models.TextField("Описание", blank=True)
    slug = models.SlugField("URL", max_length=255, unique=True, null=False, editable=True)
    price = models.DecimalField("Цена", max_digits=10, decimal_places=2, default=99.99)
    image = models.ImageField("Изображение", upload_to='images/products/%Y/%m/%d', blank=True, default='images/products/default.jpg')
    available = models.BooleanField("Наличие", default=True)
    created_at = models.DateTimeField("Дата создания", auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField("Дата обновления", auto_now=True)
    discount = models.IntegerField(default=0, validators=[MinValueValidator(0), MaxValueValidator(100)])
    
    class Meta:
        verbose_name = 'Товар'
        verbose_name_plural = 'Товары'
        ordering = ['-created_at']
        
    def __str__(self):
        """
        Return the string representation of the product.

        The string representation is the name of the product.
        """

        return self.name
    
    def get_absolute_url(self):
        return reverse('shop:product-detail', args=[self.slug])
    
    def get_discounted_price(self):
        discounted_price = self.price * (Decimal(1) - Decimal(self.discount) / Decimal(100))
        return round(discounted_price, 2)
    
    @property
    def full_image_url(self):
        if self.image:
            return self.image.url
        return None
    
    
class ProductManager(models.Manager):
    def get_queryset(self):
        """
        Return a QuerySet of all avaliable products.
        """
        
        return super(ProductManager, self).get_queryset().filter(available=True)
    
class ProductProxy(Product):
    
    objects = ProductManager()
    
    class Meta:
        proxy = True